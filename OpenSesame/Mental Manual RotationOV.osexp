---
API: 2.1
OpenSesame: 3.2.8
Platform: nt
---
set width 1680
set uniform_coordinates yes
set title "Mental Rotation with 3 figures"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 1050
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 24
set font_italic no
set font_family sans
set font_bold no
set experiment_path "C:\\Users\\LocalAdmin\\Documents\\Programmierung\\OpenSesame\\Mental Manual Rotation"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background "#000000"

define sequence BlockSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run ReadInstructions always
	run ShowInstructionsFixedDuration always
	run StimulusRandomization always
	run ShowInstructions_1 always
	run WaitForPedalResponse always
	run setTime always
	run ShowStimuli always

define loop Blocks
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 3
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 aaBlock preTest
	setcycle 0 instructions "InstructionsPractice.txt"
	setcycle 0 maxDurationMins 0
	setcycle 0 feedbackDuration 1000
	setcycle 0 feedback 1
	setcycle 0 training 0
	setcycle 0 modelsForBlock models1
	setcycle 0 axesForBlock axes
	setcycle 0 anglesForBlock angles
	setcycle 1 aaBlock training
	setcycle 1 instructions Instructionstraining
	setcycle 1 maxDurationMins 1
	setcycle 1 feedbackDuration 1000
	setcycle 1 feedback 1
	setcycle 1 training 1
	setcycle 1 modelsForBlock models2
	setcycle 1 axesForBlock axesTraining
	setcycle 1 anglesForBlock anglesTraining
	setcycle 2 aaBlock postTest
	setcycle 2 instructions "Instructions.txt"
	setcycle 2 maxDurationMins 1
	setcycle 2 feedbackDuration 1000
	setcycle 2 feedback 1
	setcycle 2 training 0
	setcycle 2 modelsForBlock models3
	setcycle 2 axesForBlock axes
	setcycle 2 anglesForBlock angles
	run BlockSequence

define inline_script CreateID
	set description "Executes Python code"
	___run__
	if(var.customID==1):
		#ask for ID
		#Create a form
		form = Form(
			cols=[1], rows=[2,1],
			margins=(50,50,50,50), spacing=25
		)
		#show form with question and text input
		form.set_widget(Label(text=var.IDprompt, center=False), (0,0))
		textInput=TextInput(return_accepts=True, stub=u'ID')
		form.set_widget(textInput, (0,1))
		var.aaID=form._exec(textInput)
		#print(var.aaID)
	else:
		import time
		var.aaID=time.time()
	__end__
	set _prepare ""

define sketchpad FeedbackCorrect
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackCorrect]" x=0 y=0 z_index=0

define sketchpad FeedbackWrong
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackWrong]" x=0 y=0 z_index=0

define sketchpad Fixation
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[fixation]" x=0 y=0 z_index=0

define sequence Fixation_1
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run Fixation always

define inline_script InitializeJoystick
	set description "Executes Python code"
	___run__
	import pygame
	
	joy=pygame.joystick.Joystick(0)
	joy.init()
	var.myJoystick=joy
	#joytick parameters
	var.leftPedalAxis=1
	var.rightPedalAxis=3
	var.wheelAxis=0
	var.buttonRightBottom=7
	var.buttonRightTop=8
	var.buttonLeftBottom=6
	var.buttonLeftTop=9
	__end__
	set _prepare ""

define inline_script KeyPressRotation
	set description "Executes Python code"
	___run__
	##rotate stimulis with keys
	pedal=u'0'
	#loop until response is given
	while pedal==u'0':
		#check pedal position
		if var.myJoystick.get_axis(var.leftPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'left'
		elif var.myJoystick.get_axis(var.rightPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'right'
		else:
			#get press of buttons and set rotation direction
			var.rotationDirection=var.myJoystick.get_button(var.buttonRightBottom)*var.myJoystick.get_button(var.buttonLeftBottom)-var.myJoystick.get_button(var.buttonRightTop)*var.myJoystick.get_button(var.buttonLeftTop)
			#show rotated image (even if rotateionDirection is 0 to avoid endless looping causing errors)
			items.execute(u'Rotation')
	#check if answer is correct
	var.correct=int(pedal==var.correct_response)
	__end__
	set _prepare ""

define notepad License
	__note__
	### Mental Rotation experiment according to Jost & Jansen (2019)
	#     Copyright (C) 2019  Leonardo Jost
	# 
	# This program is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.
	# 
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	# 
	# You should have received a copy of the GNU General Public License
	# along with this program.  If not, see <https://www.gnu.org/licenses/>.
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_script NoRotation
	set description "Executes Python code"
	___run__
	#visual rotation of stimulus
	pedal=u'0'
	#loop until response is given
	while pedal==u'0':
		#check pedal position
		if var.myJoystick.get_axis(var.leftPedalAxis)<0.5:
			pedal=u'left'
		elif var.myJoystick.get_axis(var.rightPedalAxis)<0.5:
			pedal=u'right'
		else:
			#show image (rotateionDirection is 0)
			items.execute(u'Rotation')
	#check if answer is correct
	var.correct=int(pedal==var.correct_response)
	__end__
	set _prepare ""

define sequence QuestionSequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run prepareQuestion always
	run ShowForm always
	run questionaireLogger always

define sequence Questionaire
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run ReadQuestions always
	run QuestionsLoop always

define loop QuestionsLoop
	set source_file ""
	set source table
	set repeat "[numberOfQuestions]"
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first no
	set break_if never
	setcycle 0 empty_column ""
	run QuestionSequence

define inline_script ReadInstructions
	set description "Executes Python code"
	set _run ""
	___prepare__
	import string
	if var.training:
		var.instructions+=str(var.trainingType)+u'.txt'
	with open(pool[var.instructions]) as file:
		instructionsText = file.read()
	var.instructionsText=instructionsText.decode(u'UTF-8-sig').replace(u'F1',var.feedbackCorrect).replace(u'F2',var.feedbackWrong).replace(u'FX',var.fixation)
	var.instructionsText1=var.instructionsText.split(u'(Continue)')[0]
	#replace part after (Continue) by empty lines to keep spacing/positioning
	#empty lines are trimmed rigorously (even non-breaking spaces) so dots are displyed
	#pixelwise positioning of text is another option but difficult as converting fontsize to px is not uniform
	if len(var.instructionsText.split(u'(Continue)'))>1:
		continueLines=var.instructionsText.split(u'(Continue)')[1].count(u'\n')+1
		var.instructionsText1+=u'.\n'*continueLines
	#remove (Continue)
	var.instructionsText=var.instructionsText.replace(u'(Continue)',u'')
	__end__

define inline_script ReadQuestions
	set description "Executes Python code"
	___run__
	import string
	with open(pool[var.questionaireFile]) as file:
		var.questionsText = file.readlines()
	var.numberOfQuestions=len(var.questionsText)
	var.questionNumber=0
	var.aaBlock=u'questionaire'
	var.answerList=list()
	var.showQuestion=1  #true is converted to yes, use 0/1 instead
	var.form_response=u''
	__end__
	set _prepare ""

define sequence Rotation
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run calculateNextAngle always
	run StimulusRotated always
	run stimulusLogger always

define inline_script SetLogfile
	set description "Executes Python code"
	___run__
	log.close()
	log.open(exp.experiment_path+u'/Logfiles/ID-%s.csv' % var.aaID)
	#delete old (empty) log file
	import os
	try:
		os.remove(exp.experiment_path+u'/subject-0.csv')
	except OSError as e:  ## if failed, report it back to the user ##
		print ("Error: %s - %s." % (e.filename, e.strerror))
	__end__
	set _prepare ""

define inline_script SetNamesAndResponses
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#load next stimuli from stimulusList
	var.modelIndex,var.angle,var.orientation,var.axis=var.stimulusList[var.stimulusNumber]
	var.model=var.models[var.modelIndex]
	var.stimulusNumber=var.stimulusNumber+1
	#randomize orientation of left and right base figure
	abArray=var.orientations
	random.shuffle(abArray)
	#set filenames of stimuli
	var.modelLeftFile=str(var.model)+u'_'+abArray[0]+u'.png'
	var.modelRightFile=str(var.model)+u'_'+abArray[1]+u'.png'
	if var.angle==0:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'.png'
	else:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'_'+var.axis+u'_'+str(var.angle)+u'.png'
	var.orientationLeftBase=abArray[0]
	#set correct responses
	if var.orientationLeftBase==var.orientation:
		var.correct_response=u'left'
	else:
		var.correct_response=u'right'
	__end__

define inline_script SetResponseTime
	set description "Executes Python code"
	___run__
	var.response_time=self.time()-var.duration-var.startTimeOfBlock
	
	##parameters to log
	var.joyLeftPedal=var.myJoystick.get_axis(var.leftPedalAxis)
	var.joyRightPedal=var.myJoystick.get_axis(var.rightPedalAxis)
	var.joyWheel=var.myJoystick.get_axis(var.wheelAxis)
	var.joyButtonLeftBottom=var.myJoystick.get_button(var.buttonLeftBottom)
	var.joyButtonLeftTop=var.myJoystick.get_button(var.buttonLeftTop)
	var.joyButtonRightBottom=var.myJoystick.get_button(var.buttonRightBottom)
	var.joyButtonRightTop=var.myJoystick.get_button(var.buttonRightTop)
	__end__
	set _prepare ""

define inline_script SetTrainingType
	set description "Executes Python code"
	___run__
	thisTraining=0
	allowedTrainings=[1,2,3]
	#ask for custom entering of ID
	if(var.customTraining==1):
		#ask for ID
		#Create a form
		form = Form(
			cols=[1], rows=[2,1],
			margins=(50,50,50,50), spacing=25
		)
		#show form with question and text input
		form.set_widget(Label(text=u'Set training type:', center=False), (0,0))
		textInput=TextInput(return_accepts=True, stub=u'training type')
		form.set_widget(textInput, (0,1))
		thisTraining=int(form._exec(textInput))
	#read trainingType from file
	elif (var.customTraining==2):
		with open(exp.get_file(var.trainingOrder),'r') as file:
			trainingOrderText = file.read()
			thisTraining=int(trainingOrderText.decode(u'UTF-8-sig')[0])
		with open(exp.get_file(var.trainingOrder),'w') as file:
			file.write(trainingOrderText[1:])
	if not thisTraining in allowedTrainings:
		import random
		random.shuffle(allowedTrainings)
		thisTraining=allowedTrainings[0]
		print(u'training random')
	var.trainingType=thisTraining
	#save finished trainings to file
	with open(pool[var.finishedTrainingOrder],'r') as file:
		finishedTrainingOrderText = file.readlines()[0].decode(u'UTF-8-sig').replace(u'\n',u'')
		finishedTrainingOrderText+=str(thisTraining)+u'\n'
	with open(pool[var.finishedTrainingOrder],'w') as file:
		file.write(finishedTrainingOrderText)
		for training in allowedTrainings:
			file.write(str(training)+u':'+str(finishedTrainingOrderText.count(str(training)))+u',')
	__end__
	set _prepare ""

define inline_script ShowForm
	set description "Executes Python code"
	___run__
	if(var.showQuestion==1):
		#parameters
		var.responseModified=u''
		var.questionAppend=var.noAnswerError
		#show question until answer is given
		while(var.responseModified==u''):
			# Create a form
			form = Form(
				cols=[1]*var.ncols, rows=[2,1],
				margins=(50,100,50,100), spacing=25
			)
			#set widgets: question
			form.set_widget(Label(text=var.thisQuestion, center=False), (0,0), colspan=var.ncols)
			#set widgets depending on type and show form
			#show form and get an answer
			if var.questionType==u'TextInput':
				textInput=TextInput(return_accepts=True, stub=u'Antwort', var=u'qAnswer')
				form.set_widget(textInput, (0,1), colspan=3)
				#add button to avoid answering
				form.set_widget(Button(text=u'Ok', var=u'ok'), (3,1))
				form.set_widget(Button(text=var.avoidQuestion), (4,1))		
				form_response=form._exec(textInput)
			elif var.questionType==u'Multiple':
				for col in range(var.ncols):
					form.set_widget(Button(text=var.thisQuestionOptions[col]), (col,1))		
				form_response=form._exec()
			elif var.questionType==u'ManualCode':
				textInput=TextInput(return_accepts=True, stub=u'', var=u'qAnswer')
				form.set_widget(textInput, (0,1))	
				form_response=form._exec(textInput)
			else: #default is ShowText to avoid problems with first index
				form.set_widget(Button(text=u'Ok'), (0,1))
				form_response=form._exec()
			#read answer
			#get text answer from textinput if text is approved by button
			if var.questionType==u'TextInput' and not form_response==var.avoidQuestion:
				var.responseModified=var.qAnswer
			elif var.questionType==u'ManualCode' and not var.qAnswer==var.thisQuestionID:
				var.responseModified=u''
				var.questionAppend=u''
			else: 
				var.responseModified=form_response
			#modify question for repeat	
			var.thisQuestion=var.thisQuestion+var.questionAppend
			#do not append more if question is again not answered
			var.questionAppend=u''
	#save answer in list (for comparison with conditions)	
	var.answerList.append((var.thisQuestionID,var.var.responseModified))
	__end__
	set _prepare ""

define sketchpad ShowInstructions
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText]" x=0 y=0 z_index=0

define sketchpad ShowInstructionsFixedDuration
	set duration "[instructionDuration]"
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText1]" x=0 y=0 z_index=0

define sequence ShowInstructions_1
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run ShowInstructions always

define loop ShowStimuli
	set source_file ""
	set source table
	set repeat "[loopRuns]"
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if "[endTime]>[maxDuration]"
	setcycle 0 empty_column ""
	run ShowStimuliSequence

define sequence ShowStimuliRotated
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run tempParameters always
	run SteeringWheelRotation "[training]=1 and [trainingType]=1"
	run KeyPressRotation "[training]=1 and [trainingType]=2"
	run VisualRotation "[training]=1 and [trainingType]=3"
	run NoRotation "[training]=0"
	run Rotation never
	run resetTempParameters always

define sequence ShowStimuliSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run WaitForWheelReset always
	run setStartTime always
	run SetNamesAndResponses always
	run ShowStimuliRotated always
	run SetResponseTime always
	run stimulusLogger always
	run FeedbackCorrect "[feedback]=1 and [correct]=1"
	run FeedbackWrong "[feedback]=1 and [correct]=0"
	run Fixation_1 "[feedback]=0"
	run calculateDuration always

define inline_script SteeringWheelRotation
	set description "Executes Python code"
	___run__
	import math
	
	##rotate stimulus by wheel position
	pedal=u'0'
	#loop until response is given
	while pedal==u'0':
		#check pedal position
		if var.myJoystick.get_axis(var.leftPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'left'
		elif var.myJoystick.get_axis(var.rightPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'right'
		else:
			#get angle from steering wheel
			var.angle=var.angleOrig+var.myJoystick.get_axis(var.wheelAxis)*540
			var.angle=round(var.angle/var.angleStep)*var.angleStep
			#show rotated image
			items.execute(u'Rotation')
	#check if answer is correct
	var.correct=int(pedal==var.correct_response)
	__end__
	set _prepare ""

define inline_script StimulusPropertiesByBlock
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#shuffle models
	random.shuffle(var.models)
	#model index groups for each block
	#models are selected later by these indices to save both the index and the modelnumber
	var.models1=[0,1,2,3,4,5] 
	var.models2=[0,1,6,7,8,9] 
	var.models3=[2,3,6,7,10,11] 
	#set restricted axes for training blocks
	var.axesTraining=[u'y']
	var.anglesTraining=list(var.angles)
	var.anglesTraining.remove(0)
	#print(var.models)
	__end__

define inline_script StimulusRandomization
	set description "Executes Python code"
	___run__
	import random
	#initialize lists
	stimulusList=list()
	stimulusList1=list()
	#add all stimuli once to stimulusList1
	for model in var.get(var.modelsForBlock):
		for angle in var.get(var.anglesForBlock):
			for orientation in var.orientations:
				if angle==0:
					stimulusList1.append((model,angle,orientation,u'0'))
				else:	
					for axis in var.get(var.axesForBlock):
						stimulusList1.append((model,angle,orientation,axis))
						
	for i in range(var.numberOfTrials):
		#randomize order in stimulusList1 until overlap condition is met	
		overlap=1
		while overlap>0:
			random.shuffle(stimulusList1)
			overlap=len(set(stimulusList1[:var.minOverlap]).intersection(stimulusList[len(stimulusList)-var.minOverlap:]))
		#add all stimuli to stimulusList	
		for stimulusPair in stimulusList1:
			stimulusList.append(stimulusPair)
	var.stimulusList=stimulusList
	#set starting index (continued list through all blocks)
	var.stimulusNumber=0
	__end__
	set _prepare ""

define sketchpad StimulusRotated
	# draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[endTime]" x=0 y=0 z_index=0
	set duration 1
	set description "Präsentiert Stimuli"
	draw image center=1 file="[modelLeftFile]" scale=1 show_if=always x=-300 y=-150 z_index=0
	draw image center=1 file="[modelRightFile]" scale=1 show_if=always x=300 y=-150 z_index=0
	draw image center=1 file="[stimulusFile]" scale=1 show_if=always x=0 y=150 z_index=0

define inline_script VisualRotation
	set description "Executes Python code"
	___run__
	#before rotation: set rotation direction
	import random
	directionArray=[-1,1]
	#random direction
	#random.shuffle(directionArray)
	#rotate in direction of short side
	if var.angle==0:
		directionArray[0]=0
	elif var.angle>180:
		directionArray[0]=1
	elif var.angle==180:
		random.shuffle(directionArray)
	var.rotationDirection=directionArray[0]
	#show start image for 500ms
	items.execute(u'Rotation')
	clock.sleep(500)
	#visual rotation of stimulus
	pedal=u'0'
	#loop until response is given
	while pedal==u'0':
		#check pedal position
		if var.myJoystick.get_axis(var.leftPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'left'
		elif var.myJoystick.get_axis(var.rightPedalAxis)<0.5 and var.allowAnswers:
			pedal=u'right'
		else:
			#show rotated image (even if rotateionDirection is 0 to avoid endless looping causing errors)
			items.execute(u'Rotation')
	#check if answer is correct
	var.correct=int(pedal==var.correct_response)
	__end__
	set _prepare ""

define inline_script WaitForPedalResponse
	set description "Executes Python code"
	___run__
	pedal=u'0'
	#loop until response is given
	while pedal==u'0':
		##check pedal position
		if var.myJoystick.get_axis(var.leftPedalAxis)<0.5:
			pedal=u'left'
		elif var.myJoystick.get_axis(var.rightPedalAxis)<0.5:
			pedal=u'right'
		else:
			items.execute(u'ShowInstructions_1')
	__end__
	set _prepare ""

define inline_script WaitForWheelReset
	set description "Executes Python code"
	___run__
	#while any pedal is pressed do not accept answers
	leftPedal=(var.myJoystick.get_axis(var.leftPedalAxis)<0.5)
	rightPedal=(var.myJoystick.get_axis(var.rightPedalAxis)<0.5)
	wheelNotZero=(abs(var.myJoystick.get_axis(var.wheelAxis))>0.05 and var.trainingType==1 and var.training)
	while leftPedal or rightPedal or wheelNotZero:
		leftPedal=(var.myJoystick.get_axis(var.leftPedalAxis)<0.5)
		rightPedal=(var.myJoystick.get_axis(var.rightPedalAxis)<0.5)
		wheelNotZero=(abs(var.myJoystick.get_axis(var.wheelAxis))>0.05 and var.trainingType==1 and var.training)
		#print(str(leftPedal))
		#print(str(rightPedal))
		#print(str(abs(var.myJoystick.get_axis(var.wheelAxis))))
		items.execute(u'Fixation_1')
	__end__
	set _prepare ""

define inline_script calculateDuration
	set description "Executes Python code"
	___run__
	#calculate end time of feedback from start of stimulus and response time
	var.endTime=var.duration+var.response_time+var.feedbackDuration
	#check if time is out
	if var.endTime>var.maxDuration and var.feedback:
		#show feedback
		clock.sleep(var.endTime-self.time()+var.startTimeOfBlock)
	#note that feedback for other trials is shown in prepare phase of this script
	__end__
	___prepare__
	#and show feedback/fixation of previous trial for approximately the correct time
	#print(var.endTime-self.time()+var.startTimeOfBlock)
	clock.sleep(var.endTime-self.time()+var.startTimeOfBlock)
	#note that exit condition is checked in run phase of this script
	__end__

define inline_script calculateNextAngle
	set description "Executes Python code"
	set _run ""
	___prepare__
	#calculate new angle (for steering wheel rotation, direciton is 0)
	var.angle=var.angle+var.rotationDirection*var.angleStep
	#allow answers if angle is close to 0/360
	#values <0 and >360 indicate a rotation past 0, as the start is always in (0,360)
	if var.angle<=10 or var.angle>=350:
		var.allowAnswers=1
	#check for value range
	while var.angle<0:
		var.angle=var.angle+360
	while var.angle>=360:
		var.angle=var.angle-360
	#set stimulus filename
	if var.angle==0:
		stimulusFile=str(var.model)+u'_'+var.orientation+u'.png'
		#end rotation for visual rotation
		var.rotationDirection=0
	else:
		stimulusFile=str(var.model)+u'_'+var.orientation+u'_'+var.axis+u'_'+str(var.angle)+u'.png'
	var.stimulusFile=stimulusFile
	
	##parameters to log
	var.joyLeftPedal=var.myJoystick.get_axis(var.leftPedalAxis)
	var.joyRightPedal=var.myJoystick.get_axis(var.rightPedalAxis)
	var.joyWheel=var.myJoystick.get_axis(var.wheelAxis)
	var.joyButtonLeftBottom=var.myJoystick.get_button(var.buttonLeftBottom)
	var.joyButtonLeftTop=var.myJoystick.get_button(var.buttonLeftTop)
	var.joyButtonRightBottom=var.myJoystick.get_button(var.buttonRightBottom)
	var.joyButtonRightTop=var.myJoystick.get_button(var.buttonRightTop)
	var.response_time=self.time()-var.duration-var.startTimeOfBlock
	__end__

define sequence experiment
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run License always
	run parameters always
	run StimulusPropertiesByBlock always
	run InitializeJoystick always
	run CreateID always
	run SetTrainingType always
	run SetLogfile always
	run Blocks always
	run Questionaire always

define inline_script parameters
	set description "Executes Python code"
	set _run ""
	___prepare__
	### parameters
	#should a custom ID be used? Otherwise date and time will be ID
	#1 for true, 0 (or other) for false) #true is converted to yes, use 0/1 instead
	var.customID=0
	#ID prompt (only necessary if customID is used)
	var.IDprompt=u'Bitte ID eingeben und mit Enter bestätigen.'
	#training type 1 - custom entering, 2 - reading from file, otherwise random (also not allowed variables)
	var.customTraining=2
	#angleResolution (steps)
	var.angleStep=3
	#files for loading and saving trainings
	var.trainingOrder=u'trainingOrder.txt'
	var.finishedTrainingOrder=u'finishedTrainings.txt'
	##feedback/fixation (fixation is automatically chosen if no feedback is given)
	#also used to replace placeholders in instructions
	var.feedbackCorrect=u'✓'
	var.feedbackWrong=u'✗'
	var.fixation=u'+'
	##instructions
	#minimum duration of instructions in ms
	var.instructionDuration=1000
	var.instructionFontSize=18
	##questionaire: 
	#option to avoid question
	var.avoidQuestion=u'keine Angabe'
	#file containing questions
	var.questionaireFile=u'Fragebogen.txt'
	#added message if no answer is given
	var.noAnswerError=u'\n\nBitte geben Sie eine Antwort ein'
	#stimulus generation
	#number of occurences of each stimulus in the generated random list
	var.numberOfTrials=20
	#stimulus parameters
	var.minOverlap=10 #minimal number of stimuli at start and end of random lists, that are not the same (should be at least 0 and well below total number of stimuli divided by 2 otherwise endless looping)
	#array of model numbers
	numberOfModels=16
	var.models=list(range(1,numberOfModels+1))
	#angles of rotation
	angleDiff=45
	minAngle=0
	maxAngle=360
	var.angles=list(range(minAngle,maxAngle,angleDiff))
	#orientations
	var.orientations=[u'a',u'b']
	#axes
	var.axes=[u'y',u'z']
	__end__

define inline_script prepareQuestion
	set description "Executes Python code"
	set _run ""
	___prepare__
	#get this question
	thisQuestionFull=var.questionsText[var.questionNumber].decode(u'UTF-8-sig')
	var.questionNumber=var.questionNumber+1
	#prepare
	var.showQuestion=1
	#get question type
	#if question starts with ( -> type
	if thisQuestionFull[0]==u'(':
		thisQuestionSplit=thisQuestionFull.split(u')')
		thisQuestionType=thisQuestionSplit[0].replace(u'(','',1)
		#rest of question (+2 for brackets)
		thisQuestionRest=thisQuestionFull[len(thisQuestionType)+2:]
	else:
		thisQuestionType=u''
		thisQuestionRest=thisQuestionFull
		print(thisQuestionFull[:3])
	var.questionType=thisQuestionType
	#if questiontype is multiple -> get Options
	if thisQuestionType=='Multiple':
		#get options in parenthenses
		var.thisQuestionOptions=thisQuestionRest.split(u')')[0].split(u',')
		#remove leading (
		var.thisQuestionOptions[0]=var.thisQuestionOptions[0][1:]
		#add additional option
		var.thisQuestionOptions.append(var.avoidQuestion)
		var.ncols=len(var.thisQuestionOptions)
		thisQuestionRest=thisQuestionRest[len(thisQuestionRest.split(u')')[0])+1:]
	elif thisQuestionType=='TextInput':
		var.ncols=5
	else:	
		var.ncols=1
	#if question starts with ( -> ID
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		var.thisQuestionID=thisQuestionNext
	else:
		var.thisQuestionID=var.questionNumber #added 1 is included here
	#if question starts with ( -> check
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		if "==" in thisQuestionNext:
			#comparison condition with ID
			checkID=thisQuestionNext.split(u'==')[0]
			checkAnswer=thisQuestionNext.split(u'==')[1]
			#print(checkID+u' '+checkAnswer)
			if (checkID,checkAnswer) in var.answerList:
				#condition fulfilled
				#showing question
				#if question starts with ( -> ?
				if thisQuestionRest[0]==u'(':
					#other operation? add later
					print(u'no processing being added yet for ' + thisQuestionNext)
			else:
				#condition not fulfilled
				#do not show question (but do log)
				var.responseModified=checkID+u'!='+checkAnswer
				var.showQuestion=0
		else:
			#other operation? add later
			print(u'no processing being added yet for ' + thisQuestionNext)
	
	var.thisQuestion=thisQuestionRest.replace(u'--',u'\n')
	__end__

define logger questionaireLogger
	set description "Logs experimental data"
	set auto_log no
	log aaBlock
	log thisQuestionID
	log responseModified
	log aaID

define inline_script resetTempParameters
	set description "Executes Python code"
	___run__
	var.angle=var.angleOrig
	var.aaBlock=var.aaBlockOrig
	__end__
	set _prepare ""

define inline_script setStartTime
	set description "Executes Python code"
	___run__
	#start time of run phase (after preparation)
	var.duration=self.time()-var.startTimeOfBlock
	__end__
	___prepare__
	#set startTime after all initialization of loop
	if var.stimulusNumber==var.firstIndexOfBlock:
		var.startTimeOfBlock=self.time()
		var.endTime=0
		var.duration=0
	#note that start time of run phase is set in run part of this script
	__end__

define inline_script setTime
	set description "Executes Python code"
	___run__
	#set timing options
	var.endTime=0
	var.maxDuration=var.maxDurationMins*60*1000
	#set maximal number of loop items
	var.loopRuns=len(var.stimulusList)-var.stimulusNumber
	var.firstIndexOfBlock=var.stimulusNumber
	__end__
	set _prepare ""

define logger stimulusLogger
	set description "Registriert experimentelle Daten"
	set auto_log no
	log model
	log modelIndex
	log angle
	log orientation
	log orientationLeftBase
	log axis
	log response_time
	log correct
	log aaBlock
	log correct_response
	log duration
	log aaID
	log joyLeftPedal
	log joyRightPedal
	log joyWheel
	log trainingType
	log joyButtonLeftBottom
	log joyButtonRightBottom
	log joyButtonLeftTop
	log joyButtonRightTop

define inline_script tempParameters
	set description "Executes Python code"
	set _run ""
	___prepare__
	var.rotationDirection=0
	#allow answers only when rotation is close to congruent
	var.allowAnswers=0
	#save original angle and block
	var.angleOrig=var.angle
	var.aaBlockOrig=var.aaBlock
	#log parameters for symmetry within loggers
	var.aaBlock=var.aaBlock+u'ShowStimulus'
	var.correct=-1
	__end__

